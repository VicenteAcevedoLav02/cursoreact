<h1> Curso de React porque Claudio Álvarez no es buen profesor en sentidos prácticos </h1>

<h2> Siguiendo por completo el libro guía </h2>


<hr>
**Estudio 1** 
**Página de inicio: 0**

Similar a ruby on rails, se crea el proyecto ocn un template online. Se usa **Vite** que solo necesita NPM y Node.js, ninguna dependencia extraña como en ruby on rails. Luego se puede combinar creo. El archivo creado tiene la siguiente distribución:

**Package.json**: Archivo que te muestra la lista de dependencias y configuariones necesarias.

**Package-lock.json"**: No tocar. Es más que nada para que la máquina sepa que hacer con las dependencias.

**Node_modules**: No tocar. Contiene los modulos de Node creados para satisfacer el proyecto.

**Vite.config.js**: Archivo para configurar Vite.

**public/**: Acá se guardan los assets estáticos del proyecto. 

**index.html**: Es el archivo HTML que se muestra en el browser cuando se inicia el proyecto en el local host. No tiene casi nada de contenido, *solo un tag que lleva al código de react*

**DE MOMENTO** lo necesario está en la carpeta src/, con el foco principal en src/App.jsx que es la que se usará para implementar los componentes de React. También en algún momento revisaremos los estilos con App.css y index.csss


<hr>

**Estudio 2** 
**Página de inicio: 17**

Existe un modo llamado npm run </ script> (el / está para q no colapse la sintaxis xd) que sirve para correr comandos específicos. Estos comandos vienen dados en package.json y se pueden actualizar como uno quiera, es un json no rocket science

    {
    ...
    },
    "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview"
    },
    ...
    

Lo primero que hacemos para estudiar react es ver el componente de react, el primero está ubicado en la ya mencionada App.jsx

Ignorando todo el boilerplate que hay, borramos todo y solo dejamos esto, es un punto de partida (es como decir hola mundog)

    import * as React from 'react';
        function App() {
            return (
                <div>   
            <h1>Hola mundog</h1>
        </div>
    );
    }

El primer componente de react que vemos es el **App** component, una función de JavaScript. Es vital que los componentes empiecen con mayúscula, si no el programa le da amsiedams, es decir, se usa **PascalCase**.

Cabe notar que el codigo retorna HTML, perturbador.

¿Sabías que se puede añadir código entre la declaración y return?

    import * as React from 'react';
    function App() {
        // you can do something in between
        return (
            <div>
                <h1>Hello React</h1>    
            </div>
    );
    }

Por ejemplo, si añadimos una función, la variable se redifinirá cada vez que se corre la función, es decir, para el rendering inicial y el re-rendering. Así que añadimos al código simplemente la declaración de función afuera. 

    import * as React from 'react';

        const title = 'React'

        function App() {
            return (
                <div>   
            <h1>Hola mundog</h1>
        </div>
    );
    }

<h3> IMPORTANTE: recordar q esta wea tiene que usar ; al final de cada cuestión </h3>

React se llama JSX porque es JavaScriptXML, que combina ambos... quieres ver como?? es muy guay!!


    import * as React from 'react';

        const title = 'React'

        function App() {
            return (
                <div>   
            <h1>Hola {title} mundog</h1>
        </div>
    );
    }

Wow!! ahora se renderiza todo!!

![Alt text](image.png)

(me acabo de dar cuenta q se pueden meter imágenes,,, gracias github y gracias mkd)

React usa el React Fast Reflesh, que detecta cambios y actualiza todo de una asi como fium re fast.

Ahora quiere que le metamos un inputs,, ni idea de como. Según, se hace así:

    import * as React from 'react';

        const title = 'React'

        function App() {
            return (
                <div>   
            <h1>Hola {title} mundog</h1>
            <label htmlFor="search">Search: </label>
            <input id="search" type="text" />
        </div>
    );
    }

JSX cambia algunas cosas, por lo que ahora se usa el atributo htmlFor = { ALGO } que cambia el for de HTML (creo q es para q no colapse con un for loop en js).

Así, en react class pasa a ser className o onclick pasa a ser onClick. *Nótese que todos los atributos son en camelcase*

Se pueden añadir diccionarios a React, eso es pulento, mira:

import * as React from 'react';


    function App() {

    const welcome = {
        greeting: 'Hola',
        title: 'React',
    };

    return (
        <div>
        <h1>
            {welcome.greeting}
            {welcome.title}
        </h1>
        <label htmlFor="search">Search: </label>
        <input id="search" type="text" />
        </div>
    );
    }
    export default App;

![Alt aatext](image-1.png)

Todo en curlybraces dentro de React es javascript parece. Por ejemplo, podemos hacerlo más engorroso añadiendo una función que te devuelve tu mismo parámetro.

![Alt text](image-2.png)

Top 10 momentos esquizofrénicos de chile (La funcion le das un texto y te lo devuelve!! wow!! )

    function App() {

    function getTitle(title){
        return title;
    }

    return (
        <div>
        <h1>
            Hola {getTitle('Mundog')}
        </h1>
        <label htmlFor="search">Search: </label>
        <input id="search" type="text" />
        </div>
    );
    }
    export default App;


**FIN DEL ESTUDIO 2: Hasta página 33**

**INICIO DEL ESTUDIO 3: Página 33**

<h3> Listas en react </h3>

Lo primero que estudiamos es la función .map(), que recorre cada índice de una lista y aplica en cada uno una función, dejando en el lugar del item el resultado de cada función. Esto es en JS.

**EN JSX POR OTRO LADO** se usa map para iterar cada item a JSX. 


    const list = [
        {
            title: 'React',
            url: 'https://reactjs.org/',
            author: 'Jordan Walke',
            num_comments: 3,
            points: 4,
            objectID: 0,
        },
        {
            title: 'Redux',
            url: 'https://redux.js.org/',
            author: 'Dan Abramov, Andrew Clark',
            num_comments: 2,
            points: 5,
            objectID: 1,
        },
    ];
    function App() { ... } // PLACEHOLDER



Acompañado obviamente del respectivo app.jsx

    function App() {

    function getTitle(title){
        return title;
    }

    return (
        <div>
        <h1> My Hacker Stories </h1>

        <label htmlFor="search">Search: </label>
        <input id="search" type="text" />

        <hr />
        <ul>
            {list.map(function (item) {
            return <li>{item.title}</li>;
            })}
        </ul>
        </div>
    );
    }
    export default App;


Acá lo que ocurre es lo siguiente:

    {list.map(function (item) {return <li>{item.title}} </li>;})}

**Functión** Placeholder del def y nombre
**Item** Nombre que se dará al valor por el que se itera
**Return** es el típico return que luego sigue con la declaración del valor que devuelve.

Finalmente y así se devuelve una función de JSX. EN este caso la función es solo item (el valor por el que se itera) y su título.

En el código el (LI) representa un ítem de lista dentro de una (UL) (Lista desordenada).

    return <li key={item.objectID}>{item.title}</li>;

**Key** es una declaración para que React use item.objectID como clave única (key) para cada elemento de la lista. Esta clave ayuda a React a identificar de manera única cada (li) dentro del ul y, por lo tanto, a manejar de manera eficiente las operaciones de renderización y actualización del DOM.

En caso de que una lista no cuete con algo para identificar, algún valor o lo que sea, se puede usar el index, esto es solo un último recurso.

    {list.map(function (item, index) {
        return (
            <li key={index}>
            {item.title}
        </li>
        );
    })}
<hr>

Anyways, la página de momento se ve así

![Alt text](image-3.png)


añadiendo más cosas al return se obtiene:

    <li key={item.objectID}>
    <span>
    <a href={item.url}>{item.title}</a>
    </span>
    <span>{item.author}</span>
    <span>{item.num_comments}</span>
    <span>{item.points}</span>
    </li>

Nótese como en la UTL se usa (a) o ANCHOR TAG de HTML, rodeando el título. Esto significa que tiene un hipervínculo.

![Alt text](image-4.png)

Los hipervinculos llevan de momento a las urls dadas en el diccionario. *Nótese que los href deben llevar https para el routing correcto a páginas FUERA del proyecto.*

**Fin del estudio 3** Página 38
<hr>

**Inicio estudio 4** Página 38

Además del componente App, podemos añadir otros componentes. Ahora transformamos la lista en otro componente llamado "List". Recordar que los componentes son de REACT!! Podemos añadir luego LIST a la función App, como en c++ llamando a funciones dentro de main

    import * as React from 'react';

    const list = [
    {
        title: 'React',
        url: 'https://puppies.com/',
        author: 'Jordan Walke',
        num_comments: 3,
        points: 4,
        objectID: 0,
    },
    {
        title: 'Reduxs',
        url: 'https://redux.js.org/',
        author: 'Dan Abramov, Andrew Clark',
        num_comments: 2,
        points: 5,
        objectID: 1,
    },
    ];

    function App() {
    function getTitle(title) {
        return title;
    }

    return (
        <div>
        <h1> My Hacker Stories </h1>

        <label htmlFor="search">Search: </label>
        <input id="search" type="text" />
        <hr />
        <List list={list} />
        </div>
    );
    }

    function List({ list }) {
    return (
        <div>
        <ul>
            {list.map(function (item) {
            return (
                <li key={item.objectID}>
                <span>
                    <a href={item.url}>{item.title}</a>
                </span>
                <span>{item.author}</span>
                <span>{item.num_comments}</span>
                <span>{item.points}</span>
                </li>
            );
            })}
        </ul>
        </div>
    );
    }

    export default App;
    

Nótese cierta discrepancia. El código que se proporciona originalmente en el libro guía es el siguiente:

    <List />

Pero según ChatGPT, para acceder a variables, se las debo pasar en la declaración inical:

    <List list={list} />

Así que, para que renderice bien, lo asumo!!

Para comprobar, voy a intentar componificar search (q no depende de ninunga otra función)

Funciona perfectamente.

![Alt text](image-5.png)

Nótese que en la declaración de Search no se incluyen parámetros, en al de List sí.

    function Search() //NO RECIBE NADA
    function List({ list }) //RECIBE ALGO Y SE LLAMA LIST, COMO EN PYTHON!!

Así, se dice que

<h4> APP es el componente padre y lo que incluye APP son componentes hijos y lo que incluyen esos componentes (elementos por los que se itera, por ejemplo) son componentes hijos del componente hijo. Si el componente no tiene componentes, es componente hoja!!!

<h1> MENTI NO ERA NAECESARIO PONER LIST NO SE POR QUË S EM HABIA BUGUEADO ANTES!??!?!</h1>

**Fin del estudio 4** Página 45

<hr>
<h1> React DOM </h1>

En el archivo src/main.jsx tenemos la declaración de los componentes, incluyendo la inicialización de App y su instancia dentro del archivo.

    import { StrictMode } from 'react'
    import { createRoot } from 'react-dom/client'
    import App from './App.jsx'
    import './index.css'

    createRoot(document.getElementById('root')).render(
    <StrictMode>
        <App />
    </StrictMode>,
    )

Se ve de esa forma.

Así cachando, editando al peo, si añado "hola" igual se renderiza, por lo que no entiendo para qué está app.jsx xd


    createRoot(document.getElementById('root')).render(
    <StrictMode>
        hola
        <App />
    </StrictMode>,
    )

Se importan React y React DOM *(según el libro guía, porque acá no me aparece nada)*

React es lo de siempre y React DOM es lo que se usa para conectar React con el HTML (o eso entendí con mi super inglés C3)

Todo esto se ve en el html que se usa para la página

    <!doctype html>
    <html lang="en">
    <head>
        <meta charset="UTF-8" />
        <link rel="icon" type="image/svg+xml" href="/vite.svg" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <title>Vite + React</title>
    </head>
    <body>
        <div id="root"></div> // ACA SE INSERTA REACT
        <script type="module" src="/src/main.jsx"></script>
    </body>
    </html>

*En realidad no seguí mucho insistiendo en esto porque mi source code es muy diferente y me estrecé y tengo sueño*

<h1> React Component Declaration </h1>

Estas son puras convenciones xd. **Es más que nada recordar usar arrow functions cuando el return es lo unico que hace la función y nada más!!**

<h1> Handler function </h1>

Handler functions son las funciones que handlean las interacciónes entre kongponentes!!!!!

para implementar correctamente, debemos hacer cosas antes que el return, por eso usamos arrow function!! recién ahora lo entendí, entonces transformamos la función a eso para aprovechar el espacio que nos deja antes del return


    const Search = () => {

        #AHORA HAY EsPACIO ACÁ YUPIU!!!!!

    return (
        <div>
        <label htmlFor="search">Search: </label>
        <input id="search" type="text" />
        </div>
    );
    }

En ese espacio trabajaremos,, sigma male core,,

Tenemos que añadir así el Event Handler Functions.

      const handleChange = (event) => {
    // synthetic event
    console.log(event);
    // value of target (here: input HTML element)
    console.log(event.target.value);
    };
    
Esto lo explica el libro y voy a intentar entenderlo!!

También se añade que en el listener, al listenear, active la función.
>

Entonces, al escribir, ocurre esto:

    
      <input id="search" type="text" onChange={handleChange} /

![Alt text](image-6.png)

Los eventos se tratan como un objeto con distintas propiedades.

De momento es solo esto, **una función que se activa cuando se cambia algo**. ¿Qué va ahí? No sé!! Gracias libro!! Me dió mucho sueño

**Fin del estudio 5**, página 54

<hr>
**Inicio del estudio 6**, página 54
<h1> React Props </h1>

No tiene mucho sentido usar funciones globales para React, por la modularidad de todos, es mejor pasar funciones de componente en componente. Esto son los **Proppers** (Referencia a poppers... mmm q rico jalar poppers....)

Para ejemplificar movemos la lista a la variable app


    const App = () => {
        
    const list = [
        {
        title: 'React',
        url: 'https://reactjs.org/',
        author: 'Jordan Walke',
        num_comments: 3,
        points: 4,
        objectID: 0,
        },
        {
        title: 'Redux',
        url: 'https://redux.js.org/',
        author: 'Dan Abramov, Andrew Clark',
        num_comments: 2,
        points: 5,
        objectID: 1,
        },
    ];

    return (
        <div>
        ....


Ahora tenemos que conectar todo. Lo primero es List, hacer que reciba la lista desde Apps:


    return (
        <div>
        <h1>My Hacker Stories</h1>

        <Search />

        <hr />

        <List list={stories} /> // LA iniciaclización de List incluye stories
        </div>
    );
    }

        
    const List = (props) => (
    <ul> // LIST Recibe Props
        {props.list.map((item) => (
        <Item key={item.objectID} item={item} />
        ))}
    </ul>
    );

Se añade algo llamado Item que no ccmprendo para qué existe!! AYUDA!!

    const Item = (props) => (
    <li>
        <span>
        <a href={props.item.url}>{props.item.title}</a>
        </span>
        <span>{props.item.author}</span>
        <span>{props.item.num_comments}</span>
        <span>{props.item.points}</span>
    </li>
    );

    export default App;

Voy a chatgptear la explicación

<h3> Explicaciones malas ojalá las borren </h3>

1. Prop.item y prop.list es porque así se llaman las variables yes más que nada para que el programador sepa de donde viene el prop... ¿para qué? ¿no desafía esto el propósito original? Allá react con sus cosas,,,

2. Bueno, emmm, eso era. Lo otro era que Item es para modulizar más!!! es otro tipo de dato de react, un elemento de una lista, entonces así el módulo List se encarga de navegar la lista y el módulo Item se encarga de renderizar el ítem.

<h4> Recordar que lo que se pasa de padre a hijo la idea es que sea INMUTABLE</h4>

**Fin del estudio 6** Página 57

<hr>

**Inicio del estudio 7** Página 57

<h1> React State </h1>

Para mutar las variables que se pasan de padre a hijo, usamos lo que vendría siendo state. Cuando el state muta, todos los componentes hijos mutan!

Un ejemplo de implementación en la barra search sería la siguiente:

    const Search = () => {
    const [searchTerm, setSearchTerm] = React.useState(''); //Setea cómo serán los cambios

    const handleChange = (event) => {
        setSearchTerm(event.target.value); //Pasa los valores a la función
    };

    return (
        <div>
        <label htmlFor="search">Search: </label>
        <input id="search" type="text" onChange={handleChange} /> // se define que acá se tiene que escuchar la cuestión

        <p>
            Searching for <strong>{searchTerm}</strong>. // se genera la búsqueda
        </p>
        </div>
    );
    };


Lo primero que se hace es inicializar search con useState, donde searchTerm es el valor temporal que tiene lo que escribiremos en la barra y setSearchTerm indica que actualizaremos ese valor. ¿Cómo reconoce los cambios? Con const handleChange. Entonces, al escribir, se setea el searchTerm como los cambios del evento.

Entonces:

const = React.useState(' ') tiene dos parámetros

**Parámetro 1**: La variable a medida que se va actualizando (VAR)
**Parámetro 2**: La función que va actualizando la variable (UPDATER FUNCTION)

<h1> Callback Handlers </h1>

Sabemos como pasar y actualizar info en componentes desde padre a hijo... ¿cómo sería al revés?  odnatnac yov sever la,,,

Usamos entonces lo que se llama **callback handlers**.

Ejemplo práctico porque si no me vuelvo loco:

Primero, inicializamos el callback handler en App (declaramos que acá se va poner un handler, punto A) y luego añadimos el resultado del handler (punto D)

    const App = () => {
        //PUNTO A 
        ...
        const handleSearch = (event) => {
            console.log(event.target.value);
        };
        ...

        //AHORA EL PUNTO D
        // D
        console.log(event.target.value);

        return {}


Luego de esto, tenemos que hacer que al hacer search, se pase el handler hacia abajo!!! hacia la cadena, esto es el punto B. De nuevo va en apps.

    <Search onSearch={handleSearch} />

Así, finalmente, hacemos que onSearch (la función del handler) reciba los props!! Esto va en el componente Search:

    const Search = (props) => {
    const [searchTerm, setSearchTerm] = React.useState('');

    const handleChange = (event) => {
        setSearchTerm(event.target.value);

        props.onSearch(event); //AL hacer el cambio, se pasa para arriba y para abajo, por eso va en el handleChange
    };

    return (
        <div>
        <label htmlFor="search">Search: </label>
        <input id="search" type="text" onChange={handleChange} />

        <p>
            Searching for <strong>{searchTerm}</strong>.
        </p>
        </div>
    );
    };

<h1> Lifting State en React </h1>

Ahora si vamos a hacer algo útil!! Filtrar las historias. Podemos pasar información en todas las direcciones, así que ahora si podemos!!

Primero hacemos que todo quede en App, para que reciba las actualizaciones y se trabaje solo desde ese punto y no desde 37 mil componentes difernetes

    const App = () => {
    const stories = [
        {
        title: 'React',
        url: 'https://reactjs.org/',
        author: 'Jordan Walke',
        num_comments: 3,
        points: 4,
        objectID: 0,
        },
        {
        title: 'Redux',
        url: 'https://redux.js.org/',
        author: 'Dan Abramov, Andrew Clark',
        num_comments: 2,
        points: 5,
        objectID: 1,
        },
    ];

    const [searchTerm, setSearchTerm] = React.useState('');

    const handleSearch = (event) => {
        setSearchTerm(event.target.value);//La actualización se hace desde acá
    };

    const searchedStories = stories.filter((story) =>
        story.title.toLowerCase().includes(searchTerm.toLowerCase())
    );

    return (
        <div>
        <h1>My Hacker Stories</h1>

        <Search onSearch={handleSearch} /> //Recibe el callback hasta acá!!

        <hr />

        <List list={searchedStories} />
        </div>
    );
    };

Y añadimos el filtro de searchedStories con una función de JSX

**Fin del estudio 7**: Página 70
